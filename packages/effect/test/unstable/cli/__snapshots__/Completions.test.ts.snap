// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`completions > bash 1`] = `
"function _forge_bash_completions() {
    local i cur prev opts cmd
    COMPREPLY=()
    cur="\${COMP_WORDS[COMP_CWORD]}"
    prev="\${COMP_WORDS[COMP_CWORD-1]}"
    cmd=""
    opts=""
    for i in "\${COMP_WORDS[@]}"; do
        case "\${cmd},\${i}" in
            ,forge)
                cmd="__forge_forge_opts"
                ;;
            ,forge build)
                cmd="__forge_forge_build_opts"
                ;;
            ,forge deploy)
                cmd="__forge_forge_deploy_opts"
                ;;
            *)
                ;;
        esac
    done
    case "\${cmd}" in
        __forge_forge_opts)
            opts="-v --verbose --log-level build deploy"
            if [[ \${cur} == -* || \${COMP_CWORD} -eq 1 ]] ; then
                COMPREPLY=( $(compgen -W "-v --verbose --log-level build deploy" -- "\${cur}") )
                return 0
            fi
            case "\${prev}" in
                "--log-level") COMPREPLY=( "\${cur}" ); return 0 ;;
            *)
                COMPREPLY=()
                ;;
            esac
            COMPREPLY=( $(compgen -W "-v --verbose --log-level build deploy" -- "\${cur}") )
            return 0
            ;;
        __forge_forge_build_opts)
            opts="--out-dir --target"
            if [[ \${cur} == -* || \${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "--out-dir --target" -- "\${cur}") )
                return 0
            fi
            case "\${prev}" in
                "--out-dir") COMPREPLY=( $(compgen -d "\${cur}") ); return 0 ;;
                "--target") COMPREPLY=( "\${cur}" ); return 0 ;;
            *)
                COMPREPLY=()
                ;;
            esac
            COMPREPLY=( $(compgen -W "--out-dir --target" -- "\${cur}") )
            return 0
            ;;
        __forge_forge_deploy_opts)
            opts="--env --file"
            if [[ \${cur} == -* || \${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "--env --file" -- "\${cur}") )
                return 0
            fi
            case "\${prev}" in
                "--env") COMPREPLY=( "\${cur}" ); return 0 ;;
                "--file") COMPREPLY=( $(compgen -f "\${cur}") ); return 0 ;;
            *)
                COMPREPLY=()
                ;;
            esac
            COMPREPLY=( $(compgen -W "--env --file" -- "\${cur}") )
            return 0
            ;;
    esac
}
complete -F _forge_bash_completions -o nosort -o bashdefault -o default forge"
`;

exports[`completions > fish 1`] = `
"complete -c forge -n "__fish_use_subcommand" -f -a "build"
complete -c forge -n "__fish_use_subcommand" -f -a "deploy"
complete -c forge -n "__fish_use_subcommand" -l verbose -s v -f
complete -c forge -n "__fish_use_subcommand" -l log-level -r
complete -c forge -n "__fish_seen_subcommand_from build" -l out-dir -r -f -a "(__fish_complete_directories (commandline -ct))"
complete -c forge -n "__fish_seen_subcommand_from build" -l target -r
complete -c forge -n "__fish_seen_subcommand_from deploy" -l env -r
complete -c forge -n "__fish_seen_subcommand_from deploy" -l file -r -f -a "(__fish_complete_path (commandline -ct))""
`;

exports[`completions > zsh 1`] = `
"#compdef forge

function _forge_zsh_completions() {
  local context state line
  typeset -A opt_args
  local ret=1

  local -a words; words=("\${words[@]}")
  local i cmd=
  for i in "\${words[@]}"; do
    case "$cmd $i" in
      "forge") cmd="forge" ;;
            forge)
                _forge_forge_handler
                ;;
            forge build)
                _forge_forge_build_handler
                ;;
            forge deploy)
                _forge_forge_deploy_handler
                ;;
      *) ;;
    esac
  done
  return ret
}

function _forge_forge_handler() {
  local ret=1
  local context state line
  typeset -A opt_args
  _arguments -s -S "-v|--verbose[]" "--log-level[]:log-level:->log-level" "*::subcommand:->sub_forge"
  case $state in
  sub_forge)
    _describe -t commands 'subcommand' ('build' 'deploy')
    ;;
  log-level)
    _message 'value'
    ;;
  esac
  return ret
}

function _forge_forge_build_handler() {
  local ret=1
  local context state line
  typeset -A opt_args
  _arguments -s -S "--out-dir[]:out-dir:->out-dir" "--target[]:target:->target"
  case $state in
  out-dir)
    _path_files -/
    ;;
  target)
    _message 'value'
    ;;
  esac
  return ret
}

function _forge_forge_deploy_handler() {
  local ret=1
  local context state line
  typeset -A opt_args
  _arguments -s -S "--env[]:env:->env" "--file[]:file:->file"
  case $state in
  env)
    _message 'value'
    ;;
  file)
    _path_files
    ;;
  esac
  return ret
}


if [ "$funcstack[1]" = "_forge_zsh_completions" ]; then
  _forge_zsh_completions "$@"
else
  compdef _forge_zsh_completions forge
fi"
`;
